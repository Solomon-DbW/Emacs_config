#+TITLE: Solomon's GNU Emacs Config
#+AUTHOR: Solomon F
#+DESCRIPTION: Solomon's personal Emacs config
#+OPTIONS: toc:2

* TABLE OF CONTENTS :toc:
- [[#important-programs-to-load-first][IMPORTANT PROGRAMS TO LOAD FIRST]]
  - [[#elpaca-package-manager][Elpaca Package Manager]]
  - [[#load-evil-mode-vim][Load Evil Mode (Vim)]]
  - [[#general-keybindings][General Keybindings]]
- [[#reload-emacs][RELOAD EMACS]]
- [[#fonts][FONTS]]
  - [[#setting-font-face][Setting Font Face]]
  - [[#all-the-icons][ALL-THE-ICONS]]
  - [[#zooming-inout][ZOOMING IN/OUT]]
- [[#gui-adjustments][GUI ADJUSTMENTS]]
  - [[#modeline][Modeline]]
  - [[#dashboard][Dashboard]]
  - [[#dark-theme][Dark Theme]]
  - [[#disable-menubar-toolbars-and-scrollbars][Disable Menubar, Toolbars, and Scrollbars]]
  - [[#display-line-numbers-and-truncated-lines][Display Line Numbers and Truncated Lines]]
- [[#ivy-counsel][IVY (COUNSEL)]]
- [[#org-mode][ORG MODE]]
  - [[#enabling-table-of-contents][Enabling Table of Contents]]
  - [[#enabling-org-bullets][Enabling Org Bullets]]
  - [[#disable-electric-org-mode-auto-indentation][Disable Electric (Org Mode) Auto-Indentation]]
  - [[#source-code-block-tag-expansion][Source Code Block Tag Expansion]]
- [[#sudo-edit][SUDO EDIT]]
- [[#which-key][WHICH-KEY]]

* IMPORTANT PROGRAMS TO LOAD FIRST
** Elpaca Package Manager
#+begin_src emacs-lisp
(defvar elpaca-installer-version 0.11)
(defvar elpaca-directory (expand-file-name "elpaca/" user-emacs-directory))
(defvar elpaca-builds-directory (expand-file-name "builds/" elpaca-directory))
(defvar elpaca-repos-directory (expand-file-name "repos/" elpaca-directory))
(defvar elpaca-order
  '(elpaca :repo "https://github.com/progfolio/elpaca.git"
           :ref nil :depth 1 :inherit ignore
           :files (:defaults "elpaca-test.el" (:exclude "extensions"))
           :build (:not elpaca--activate-package)))

(let* ((repo (expand-file-name "elpaca/" elpaca-repos-directory))
       (build (expand-file-name "elpaca/" elpaca-builds-directory))
       (order (cdr elpaca-order))
       (default-directory repo))
  (add-to-list 'load-path (if (file-exists-p build) build repo))
  (unless (file-exists-p repo)
    (make-directory repo t)
    (when (<= emacs-major-version 28) (require 'subr-x))
    (condition-case-unless-debug err
        (if-let* ((buffer (pop-to-buffer-same-window "*elpaca-bootstrap*"))
                  ((zerop (apply #'call-process `("git" nil ,buffer t "clone"
                                                  ,@(when-let* ((depth (plist-get order :depth)))
                                                      (list (format "--depth=%d" depth) "--no-single-branch"))
                                                  ,(plist-get order :repo) ,repo))))
                  ((zerop (call-process "git" nil buffer t "checkout"
                                        (or (plist-get order :ref) "--"))))
                  (emacs (concat invocation-directory invocation-name))
                  ((zerop (call-process emacs nil buffer nil "-Q" "-L" "." "--batch"
                                        "--eval" "(byte-recompile-directory \".\" 0 'force)")))
                  ((require 'elpaca))
                  ((elpaca-generate-autoloads "elpaca" repo)))
            (progn (message "%s" (buffer-string)) (kill-buffer buffer))
          (error "%s" (with-current-buffer buffer (buffer-string))))
      ((error) (warn "%s" err) (delete-directory repo 'recursive)))))
(unless (require 'elpaca-autoloads nil t)
  (require 'elpaca)
  (elpaca-generate-autoloads "elpaca" repo)
  (let ((load-source-file-function nil)) (load "./elpaca-autoloads")))

(add-hook 'after-init-hook #'elpaca-process-queues)
(elpaca `(,@elpaca-order))
#+end_src

** Load Evil Mode (Vim)
#+begin_src emacs-lisp
  (elpaca elpaca-use-package
    (elpaca-use-package-mode))


  (elpaca evil
    (use-package evil
      :init
      (setq evil-want-integration t
            evil-want-keybinding nil
            evil-vsplit-window-right t
            evil-split-window-below t)
      :config
      (evil-mode 1)))

  (elpaca evil-collection
    (use-package evil-collection
      :after evil
      :config
      (setq evil-collection-mode-list '(dashboard dired ibuffer))
      (evil-collection-init)))

  (elpaca evil-tutor
    (use-package evil-tutor))

  (use-package emacs :ensure nil
    :config
    (setq ring-bell-function #'ignore))
#+end_src

** General Keybindings
#+begin_src emacs-lisp
  (elpaca general
    (use-package general
      :config
      (general-evil-setup)

      ;; Set 'SPC' as leader key
      (general-create-definer solomon/leader-keys
        :states '(normal insert visual emacs)
        :keymaps 'override
        :prefix "SPC"
        :global-prefix "M-SPC")

    (solomon/leader-keys
  	    "." '(find-file :wk "Find file")
  	    "f c" '((lambda () (interactive) (find-file "~/.config/emacs/config.org")) :wk "Edit emacs config")
  	    "g c c" '(comment-line :wk "Comment lines")
  	    
  	    "f r" '(counsel-recentf :wk "Find recent files")

              "pc" '(clipboard-yank :wk "Paste Clipboard")

  	    "b" '(:ignore t :wk "buffer")
  	    "b b" '(switch-to-buffer :wk "Switch buffer")
  	    "b i" '(ibuffer :wk "Ibuffer")
  	    "b k" '(kill-this-buffer :wk "Kill buffer")
  	    "b n" '(next-buffer :wk "Next buffer")
  	    "b p" '(previous-buffer :wk "Previous buffer")
  	    "b r" '(revert-buffer :wk "Reload buffer")

  	    "e" '(:ignore t :wk "evaluate")
  	    "e b" '(eval-buffer :wk "Eval buffer")
  	    "e d" '(eval-defun :wk "Eval defun")
  	    "e e" '(eval-expression :wk "Eval expression")
  	    "e l" '(eval-last-sexp :wk "Eval last sexp")
  	    "e r" '(eval-region :wk "Eval region")

  	    "h" '(:ignore t :wk "Help")
  	    "h f" '(describe-function :wk "Describe function")
  	    "h v" '(describe-variable :wk "Describe variable")
  	    "h r r" '((lambda () (interactive) (load-file "~/.config/emacs/init.el")) :wk "Reload emacs config")
  	    ;; "h r r" '(reload-init-file :wk "Reload emacs config")

  	    "t" '(:ignore t :wk "Toggle")
  	    "t l" '(display-line-numbers-mode :wk "Toggle line numbers")
  	    "t t" '(visual-line-mode :wk "Toggle truncated lines")
  	  )))
#+end_src

* RELOAD EMACS
A custom Emacs function to reload init.el
#+begin_src emacs-lisp
(defun reload-init-file () ;; 'defun' == 'def' in python
  (interactive) ;; Makes function available using 'M-x' which is 'Alt-x'
  (load-file user-init-file)
  (load-file user-init-file))
#+end_src
  
* FONTS
** Setting Font Face
#+begin_src emacs-lisp
          (set-face-attribute 'default nil
                              :font "JetBrains Mono"
                              :height 110
                              :weight 'medium)

          (set-face-attribute 'variable-pitch nil
                              :font "JetBrains Mono"
                              :height 120
                              :weight 'medium)

          (set-face-attribute 'fixed-pitch nil
                              :font "JetBrains Mono"
                              :height 110
                              :weight 'medium)

          (set-face-attribute 'font-lock-comment-face nil :slant 'italic)
          (set-face-attribute 'font-lock-keyword-face nil :slant 'italic)

          (add-to-list 'default-frame-alist '(font . "JetBrains Mono-11"))

          (setq-default line-spacing 0.12)
#+end_src

** ALL-THE-ICONS
#+begin_src emacs-lisp
  (use-package all-the-icons
    :ensure t
    :if (display-graphic-p))
#+end_src


** ZOOMING IN/OUT
#+begin_src emacs-lisp
(global-set-key (kbd "C-=") 'text-scale-increase) ;; Ctrl +/-
(global-set-key (kbd "C--") 'text-scale-decrease)
(global-set-key (kbd "<C-wheel-up>") 'text-scale-increase)
(global-set-key (kbd "<C-wheel-down>") 'text-scale-decrease)
#+end_src

* GUI ADJUSTMENTS

** Modeline
#+begin_src emacs-lisp
        (use-package doom-modeline
          :ensure t
          :init (doom-modeline-mode 1))
      ;; (use-package powerline
      ;;   :ensure t
      ;;   :config
      ;;   (powerline-default-theme))
  ;;  (use-package spaceline
    ;;   :ensure t
    ;;   :config
    ;;   (require 'spaceline-config)
    ;;   (spaceline-emacs-theme))

 #+end_src

** Dashboard
#+begin_src emacs-lisp
(use-package dashboard
  :ensure t 
  :init
  (setq initial-buffer-choice 'dashboard-open
        dashboard-set-heading-icons t
        dashboard-set-file-icons t
        dashboard-banner-logo-title "Emacs Is More Than A Text Editor!"
        dashboard-startup-banner "~/.config/emacs/images/emacs-dash.png"
        dashboard-center-content nil
        dashboard-items '((recents . 5)
                          (agenda . 5)
                          (bookmarks . 3)
                          (projects . 3)
                          (registers . 3)))
  :custom
  (dashboard-modify-heading-icons '((recents . "file-text")
                                     (bookmarks . "book")))
  :config
  (dashboard-setup-startup-hook))
#+end_src

** Dark Theme
#+begin_src emacs-lisp
  ;; (invert-face 'default)
   (use-package doom-themes
    :ensure t
    :config
    ;; Global settings (defaults)
    (setq doom-themes-enable-bold t    ; if nil, bold is universally disabled
          doom-themes-enable-italic t) ; if nil, italics is universally disabled
    (load-theme 'doom-one t)

    ;; Enable flashing mode-line on errors
    (doom-themes-visual-bell-config)
    ;; Enable custom neotree theme (nerd-icons must be installed!)
    (doom-themes-neotree-config)
    ;; or for treemacs users
    (setq doom-themes-treemacs-theme "doom-atom") ; use "doom-colors" for less minimal icon theme
    (doom-themes-treemacs-config)
    ;; Corrects (and improves) org-mode's native fontification.
    (doom-themes-org-config))
#+end_src

** Disable Menubar, Toolbars, and Scrollbars
#+begin_src emacs-lisp
(menu-bar-mode -1)
(tool-bar-mode -1)
(scroll-bar-mode -1)
#+end_src

** Display Line Numbers and Truncated Lines
#+begin_src emacs-lisp
(global-display-line-numbers-mode 1)
(global-visual-line-mode t)
#+end_src

* IVY (COUNSEL)
A generic completion mechanism for Emacs
#+begin_src emacs-lisp
(elpaca counsel
(use-package counsel
  :after ivy
  :config (counsel-mode)))

(use-package ivy
  :bind
  ;; ivy-resume resumes the last Ivy-based completion.
  (("C-c C-r" . ivy-resume)
   ("C-x B" . ivy-switch-buffer-other-window))
  :custom
  (setq ivy-use-virtual-buffers t)
  (setq ivy-count-format "(%d/%d) ")
  (setq enable-recursive-minibuffers t)
  :config
  (ivy-mode))

(use-package all-the-icons-ivy-rich
  :ensure t
  :init (all-the-icons-ivy-rich-mode 1))

(use-package ivy-rich
  :after ivy
  :ensure t
  :init (ivy-rich-mode 1) ;; this gets us descriptions in M-x.
  :custom
  (ivy-virtual-abbreviate 'full
   ivy-rich-switch-buffer-align-virtual-buffer t
   ivy-rich-path-style 'abbrev)
  :config
  (ivy-set-display-transformer 'ivy-switch-buffer
                               'ivy-rich-switch-buffer-transformer))
#+end_src

* ORG MODE
** Enabling Table of Contents
#+begin_src emacs-lisp
(elpaca toc-org
  (use-package toc-org
    :commands toc-org-enable
    :init
    (add-hook 'org-mode-hook 'toc-org-enable)))
#+end_src

** Enabling Org Bullets
#+begin_src emacs-lisp
(use-package org-bullets
  :ensure t
  :hook (org-mode . org-bullets-mode))
#+end_src

** Disable Electric (Org Mode) Auto-Indentation
#+begin_src emacs-lisp
(electric-indent-mode -1)
#+end_src

** Source Code Block Tag Expansion
Org-tempo is not a separate package but a module within org that can be enabled.  Org-tempo allows for '<s' followed by TAB to expand to a begin_src tag.  Other expansions available include:

| Typing the below + TAB | Expands to ...                          |
|------------------------+-----------------------------------------|
| <a                     | '#+BEGIN_EXPORT ascii' … '#+END_EXPORT  |
| <c                     | '#+BEGIN_CENTER' … '#+END_CENTER'       |
| <C                     | '#+BEGIN_COMMENT' … '#+END_COMMENT'     |
| <e                     | '#+BEGIN_EXAMPLE' … '#+END_EXAMPLE'     |
| <E                     | '#+BEGIN_EXPORT' … '#+END_EXPORT'       |
| <h                     | '#+BEGIN_EXPORT html' … '#+END_EXPORT'  |
| <l                     | '#+BEGIN_EXPORT latex' … '#+END_EXPORT' |
| <q                     | '#+BEGIN_QUOTE' … '#+END_QUOTE'         |
| <s                     | '#+BEGIN_SRC' … '#+END_SRC'             |
| <el                    | '#+BEGIN_SRC emacs-lisp' … '#+END_SRC'  |
| <v                     | '#+BEGIN_VERSE' … '#+END_VERSE'         |


#+begin_src emacs-lisp
  (require 'org-tempo)
  (add-to-list 'org-structure-template-alist '("el" . "src emacs-lisp"))
#+end_src

* SUDO EDIT
#+begin_src emacs-lisp
(elpaca sudo-edit
(use-package sudo-edit
  :config
    (solomon/leader-keys
      "fu" '(sudo-edit-find-file :wk "Sudo find file")
      "fU" '(sudo-edit :wk "Sudo edit file"))))
#+end_src

* WHICH-KEY
#+begin_src emacs-lisp
(use-package which-key
  :init (which-key-mode 1)
  :config
  (setq which-key-side-window-location 'bottom
        which-key-sort-order #'which-key-key-order-alpha
        which-key-sort-uppercase-first nil
        which-key-add-column-padding 1
        which-key-max-display-columns nil
        which-key-min-display-lines 6
        which-key-side-window-slot -10
        which-key-idle-delay 0.1
        which-key-side-window-max-height 0.25
        which-key-max-description-length 25
        which-key-allow-imprecise-window-fit t
        which-key-separator " → "))
#+end_src


